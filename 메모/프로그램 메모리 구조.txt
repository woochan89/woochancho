메모리의 구조

프로그램이 실행되기 위해서는 먼저 프로그램이 메모리에 로드되어야 함
또한 프로그램에서 사용되는 변수들을 저장할 메모리도 필요하다


1.Stack영역

특정 구문 내에서 임시로 할당되는 메모리 영역
{}와 같은 중괄호(브레이스braces)내에서 유효한 데이터가 저장됨
프로그램 코드상에서 {를 만나면 새로운 스택 영역이 시작되고 }를 만나면 생성했던 데이터들이 해제됨
함수를 호출할 때 사용된 매개변수도 마찬가지로 스택에 저장되므로 함수가 종료되면 해제됨
스택영역은 상위에서 부터 아래로 증가하면서 할당되는데 '컴파일시에 크기가 결정됨'
과도하게 재귀함수를 사용할시 overflow가능성 있음
Heap영역과 영역을 공유함

낭비되는 공간이 없다
하나의 명령만으로 메모리조작과 어드레스조작이 가능하다
스택이 힙보다 할당속도가 훨씬 빠름(스택은 이미 할당되어있는 공간을 사용하는것이고 힙은 따로 할당해서 사용하는 공간이기 때문)
스택은 공간이 적기 때문에 모든응용에서 스택을 사용할수는 없다
스택에서 할당의 의미는 이미 생성되어 있는 스택에 대해 포인터의 위치만 바꿔주는 단순한 Cpu설정임

한계가 있어 한계를 초과하도록 삽입할 수 없다
유연성이 부족하다

2. Heap영역

프로그램에서 자유롭게 할당하고 해제할 수 있는 영역 -> 포인터
힙영역 메모리를 할당하거나 해제할땐 명시적으로 함수를 호출해야함
32비트 운영채제 에선 일반적으로 약 2기가바이트의 힙영역을 할당할 수 있슴
64비트 운영체제는 이론상 한계치가 있지만 사실상 없다고 봄
메모리 할당후 해제하는것을 잊어버리면 메모리 누수로 큰 문제가 생김
자바나 C#은 Garbage Collector(GC)가 주인잃은 메모리를 자동으로 해제 해주지만 C/C++은 반드시 직접 해제해야함
Stack영역과 영역을 공유함

메모리를 효율적으로 사용가능 함
프로그램에 필요한 갯수나 크기를 미리 알 수 없는 경우 사용 가능하다
개체가 너무 커서 스택 할당자에 맞지 않는 경우 사용가능하다

할당작업과 해제작업 으로 인한 속도저하
힙손상으로 인한 속도 저하
힙손상 예시:이중해제, 이중해제 후 블록사용, 블록 경계를 벗어나 덮어쓰기 등
힙경합으로 인한 속도 저하

힙에서의 할당은 요청된 크기 현재 메모리의 상활등 다양한 요소를 고려하기 때문에 많은 CPU설정이 필요하다



3. Data영역

bss,data영역을 묶어서 data영역이라고 함
전역변수, 스태틱(정적)변수, 배열, 구조체등이 저장되는데 프로그램이 실행될 때 할당 되고 종료될 때 해제됨

4. Code or Text영역

코드영역에는 실제 프로그램 동작을 수행하는 '명령어'와 '전역 상수'가 저장됨
전역상수는 ""로 선언된 문자열 상수나 'const'접두어가 붙은 변수등이 해당됨
이 영역은 Read Only로 변경되지 않음
사람이 작성한 소스코드