특징

1. c++의 네가지 타입캐스트 연산자(static_cast, const_cast, reinterpret_cast,dynamic_cast)중의 하나
2. 안전한 다운캐스팅(safe downcasting)에 사용됨-> upcasting에도 사용됨
3. 부모 클래스의 포인터 에서 자식 클래스의 포인터로 다운 캐스팅해줌
4. 런타임 시간에 실제로 해당 타입이 다운 캐스팅이 가능한지 검사하기 때문에 런타임 비용이 조금 높은 캐스트 연산자
5. 반드시 하나 이상의 virtual(가상)함수가 존재해야 사용가능

사용법

dynamic_case<new_type>(expression)
dynamic_case<바꾸려는 새로운 타입>(대상)

성공시 new_type의 값을 리턴하고 실패시 널을 반환하거나 예외처리됨

ex)
dynamic_cast<childClass*>(Parent*);



ex)

class A {
public:
	virtual void func() { cout << "부모의 가상함수"; }
};
class B :public A
{

};

void main()
{
	A* compisite = new B();

	//B* componentB = compisite;
	//위 방식처럼 직접적으로 자식 클래스 포인터에 부모 클래스 포인터를 집어넣을순 없음
	B* component = dynamic_cast<B*>(compisite);
	component->func();

}

