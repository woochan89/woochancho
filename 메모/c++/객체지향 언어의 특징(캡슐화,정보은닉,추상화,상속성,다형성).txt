캡슐화

1. 캡슐화는 데이터와 데이터를 처리하는 함수를 하나로 묶은 것을 의미
2. 캡슐화된 객체의 세부 내용이 외부에 은폐되어, 변경이 발생할 때 오류의 파급 효과가 적다
3. 캡슐화된 객체들은 재사용이 용이
4. 객체들 간의 메시지를 주고받을 때 각 객체의 세부 내용은 알 필요가 없으므로 인터페이스가 단순해지고, 객체간의 결합도가 낮아진다



정보은닉

1. 캡슐화에서 가장 중요한 개념으로, 다른 객체에게 자신의 정보를 숨기고 자신의 연산만을 통하여 접근을 허용하는 것-> class의 private접근 지정자
2. 각 객체의 수정이 다른 객체에게 주는 영향을 최소화 하는 기술
3. 외부 객체가 특정 객체의 데이터와 함수를 직접 접근하여 사용하거나 변경하지 못하므로 유지보수와 소프트웨어 확장 시 오류를 최소화 할 수 있음



추상화

1. 추상화는 불 필요한 부분을 생략하고 객체의 속성 중 가장 중요한 것에만 중점을 두어 개략화 하는것
2. 인간이 복잡한 문제를 다루는 데 가장 기본이 되는 방법으로, 완전한 시스템을 구축하기 전에 그 시스템과 유사한 모델을 만들어 여러가지 요인들을 테스트 함-> 큰 틀을 구상하고 간단한 것 부터 만들어감
3. 추상화는 최소의 비용으로 실제 상황에 대처할 수 있고, 시스템의 구조 및 구성을 가시적으로 볼수 있음


상속성

1. 상속성은 이미 정의된 상위 클래스의 모든 속성과 연산을 하위 클래스가 물려받는 것
2. 상속성을 이용하면 하위 클래스는 상위 클래스의 모든 속성과 연산을 자신의 클래스 내에서 다시 정의하지 않고도 즉시 자신으 속성으로 사용할수 있음
3. 하위 클래스는 상위 클래스부터 상속받은 속성과 연산 외에 새로운 속성과 연산을 첨가하여 사용할 수 있음
4. 상위 클래스의 속성과 연산을 하위 클래스가 공유할 수 있기 때문에 객체와 클래스의 재사용, 즉 소프트 웨어 재사용을 증대시키는 중요한 개념이 됨ㅁ



다형성

1. 메시지에  의해 객체가 연산을 수행하게 될 때 하나의 메시지에 대해 각 객체가 가지고 있는 고유한 방법으로 응답할 수 있는 능력을 의미함
2. 객체들은 동일한 함수명을 사용하여 같은 의미의 응답을 함
3. 응용 프로그램 상에서 하나의 함수나 연산자가 두개 이상의 서로 다른 클래스의 인스턴스들은 같은 클래스에 속한 인스턴스처럼 수행할 수 있도록 하는것

다형성은 오버라이딩과 밀접한 연관이 있는 객체 지향 프로그래밍의 특징중 하나입니다.
다형성이라는 말 자체는 같은 메소드를 호출할 때 실제 수행되는 내용은 객체가 무엇이냐에 따라 달라진다는 얘기입니다.
예를 들어, 그림을 그리고자 할 때, 삼각형 객체에게 Draw()하는 것과 사각형 객체에게 Draw()하는 것은 모두 Draw()라는 루틴을 통해 그림을 그리게 하는 것이지만, 삼각형이 그리는 그림과 사각형이 그리는 그림은 다르게 된다는 것입니다.
즉, 똑같은 방식으로 호출하지만 실제 수행은 다르게 나타나는 것을 다형성이라고 합니다.
