#ifndef STRING
#define STRING
 
(...)
 
#endif

순서
1. STRING이라는 상수가 선언되어 있는지 확인한다
2. 상수가 선언 안되있다면, STRING이라는 상수를 선언한다
3. header에 들어갈 내용이 작성된다
4. 만약 STRING이라는 상수가 선언이 안되있다면, 그냥 해당 참조는 무시하게 된다.
-> 중복참조를 막는게 header파일에서 #ifndef라는 전처리문을 사용하는 핵심이유가 된다



#ifndef 헤더명_H__ ~ #endif

헤더파일이 겹치는 것을 막기 위한 일종의 매크로이다. 예를 들어 헤더파일에 어떤 클래스의 인터페이스 선언을 넣었다고 하자. 이 클래스 인터페이스에서 다른 파일의 프로토타입이 필요해서 다른 A 파일을 include 하고 있는데 이 헤더 파일을 include 하는 파일에서 A라는 헤더 파일을 이미 include 하고 있다면 두번 define한 것이 된다. 그러면 SYNTAX 에러가 난다. 그래서 그런 것을 막는 방법의 하나로 #ifndef을 사용한다. 이전에 include되어 있으면 #endif쪽으로 점프해버려 결국 한번 선언되는 것이다.

#include <stdio.h> ------ (a)
#include <stdio.h> ------ (b)
위와 같이 동일한 구문을 두번 썼다고 하자. 그런데 앞에 이미 include를 했는데 밑에 또 한다면 문제가 된다. 컴파일러가 검사해야할 코드량도 많아진다. 그래서 stdio.h에는

#ifndef STDIO_H__
#define STDIO_H__
가 선언되어 있다. 만약 STDIO_H가 선언되어 있지 않다면 선언한다는 뜻이다. 그 뒤 (b)에서는 이미 (a)쪽에서 STDIO_H__ 을 선언한 상태이기 때문에 전처리기 쪽에서 무시해버린다. 그러므로 컴파일러는 (a)만 검사한다.