특징

1. 객체 사이에 일 대 다의 의존 관계를 정의해두어, 어떤 객체의 상태가 변할 때 그 객체에 의존성을 가진 다른 객체들이 그 변화를 통지 받고 자동으로 업데이트 될수 있게하는것
2. 서로 의존되어 있는 다수의 개체에서 하나의 개체의 상태가 바뀜에 따라 나머지 개체에 변화를 알려주는 패턴
3. 주제 개체에 등록하여 변화를 주고, 받기 때문에 느슨한 결합으로 연결된 패턴
4. 개체를 추가하고 삭제하는데 유연성이 높으며, 각 각의 개체 또한 독립적
5. 두 가지 개체(주체개체(Subject), 구독개체(Object))로 구성되어 있다
6. 주제객체와 옵저버객체가 느슨하게 결합된다 -> 느슨한결합 : 상호작용을 하긴 하지만 서로에 대해서 잘 모른다는 뜻
7. 주제가 옵저버에 대해서 아는것은 옵저버가 특정 인터페이스를 구현한다는것 뿐임
8. 옵저버는 언제든지 새로 추가할수 있음
9. 새로운 형식의 옵저버를 추가하려고 할 때도 주제를 전혀 변경할 필요가 없습니다
10. 주제와 옵저버는 서로 독깁적으로 재사용할 수 있습니다
11 주제나 옵저버가 바뀌더라도 서로한테 영향을 미치지는 않습니다




디자인 원칙

서로 상호작용을 하는 개체 사이에서는 가능하면 느슨하게 결합하는 디자인을 사용해야 한다
-> 느슨하게 결합하는 디자인을 사용하면 변경 사항이 생겨도 무난히 처리 할 수 있는 유연한 객체지향 시스템을 구축할 수 있기 때문-> 객체 사이의 상호 의존성을 최소화 할 수 있기 때문