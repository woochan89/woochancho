싱글톤(단일체)

특징

오직 한 개의 클래스 인스턴스만을 갖도록 보장하고, 이에 대한 전역적인 접근점을 제공한다.
-> 인스턴스가 사용될 때 똑같은 인스턴스를 여러 개 만드는 것이 아니라, 기존에 생성했던 동일한 인스턴스를 사용하게 하는것

남용이 많으므로 주의해야한다

널 안넣어주면 오류남

하나 이상 있을시 오류가 나진 않음 -> 문법이 아니고 디자인'구조'이기 때문

임시보관용으로 많이 사용됨(캐싱용도로 사용가능)




사용이유

1. 한 번도 사용하지 않는다면 아예 인스턴스를 생성하지 않는다-> 쓰는 위치에서 바로 사용하므로 미리 초기화 시켜놓고 사용하지 않는것보다 유리하다

2. 런타임에 초기화된다 -> 보통 싱글턴 대안으로 정적 멤버 변수를 많이 사용한다. 정적 멤버 변수는 자동 초기화 되는 문제가 있다. 즉, 컴파일러는 main 함수를 호출하기 전에 정적 변수를 초기화 하기 떄문에 프로그램이 실행된 다음에야 알 수 있는 정보를 활용할 수 없다. 또한 정적 변수 초기화 순서도 보장되지 않기 떄문에 한 정적 변수가 다른 정적 변수에 안전하게 의존할 수도 없다.

사용예시
ex)

#pragma once

template <typename T>
class Singleton
{
private:
	static T* m_pThis; -> 스태틱 함수안에선 스태틱 멤버변수만 사용가능

protected:
	Singleton()
	{
	};
	virtual ~Singleton()
	{
	};

public:
	static T* GetInstance()
	{
		if (m_pThis == NULL)
			m_pThis = new T;

		return m_pThis;
	};

	static void DestroyInstance()
	{
		if (m_pThis)
		{
			delete m_pThis;	
			m_pThis = NULL;
		}
	};
};

template <typename T> T* Singleton<T>::m_pThis = 0; ->이거 없으면 오류남