보간 탐색은 그냥 절반으로 줄이는 이진탐색이랑 달리 적정 mid 값을 찾아 좀 더 최대값을 줄이는것

중복키 존재하면 안됨 -> 중복 숫자가 존재하면 안 됨 -> 중복된 숫자가 들어오면 숫자 저장안하고 리턴


탐색키가 고유해야한다->중복사용 불가->중복되는 숫자없이 표현하기 쉬워서 숫자를 사용한것일뿐  인트만 사용 가능 한 건 아님

이진 탐색 트리 -> 중위순회(루트 노드를 기준으로 왼쪽은 작은 숫자 오른쪽은 큰숫자를 사용하므로)

사전구조 dictionary

테이블에서 기본적으로 중복키가 존재할수 없지만 사용한다면 체이닝을 이용한 것


규칙적인 연결구조가 없기 때문에 탐색과정이 제일 어렵지만 ,가중치와 비주얼로 표현하기 위해 사용

간선의 집합 E(G), 정점의 집합 V(G) 

방향,무방향 그래프를 표현할떄 괄호로 차이를 둔다 ex)무방향{(A,B)}     방향{<A,B>}

순서가 없고 시작지점만 있음됨
연결이 되어 있다는게 중요하지 하나씩 따로 할당해서 만들 필요는 없음

한번에 처리하기->스택

일률적으로 하나씩->큐

이중for문은 리스크가 크기때문에 지양

C,C++사용시 동적할당 메모리도 중요하지만 복잡도랑 연관관계 없음-> 복잡도 우선순위up


복습하고 stl 프롤로그 확인


비긴 엔드

[]는 오류 발생시 알려주지 않지만 at 은 예외처리 발생시킴 오류 줄임->at이 안정적

p는 포인터(주소)

capacity가 늘어날때 두배씩 늘어남

reserve로 할당해놓고 쓰는게 좋다 양이 많을시

at은 예외가 발생하므로 트라이 캐치 사용가능-> []는 사용불가

out_of_range는 타입명

벡터랑 덱만 증감연산자로 조정가능



일정크기의 정적인 구간 을 사용해서 과제


list와 vector의 삽입동작 차이?

