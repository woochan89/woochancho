#include<iostream>
#include<stdio.h>
//using namespace std;

typedef struct _node {
	int data;
	struct _node *before;
	struct _node *next;
}Node;

typedef struct _list {
	Node *head;
	Node *tail;
	Node *cur;
	int numOfdata;
}List;

void Linit(List *list) {
	list->head = (Node*)malloc(sizeof(Node));
	list->head->next = NULL;
	list->cur = NULL;
	list->tail = NULL;
	list->numOfdata = 0;
}

void Linsert(List *list, int data) {
	Node *newNode = (Node*)malloc(sizeof(Node));
	newNode->data = data;
	newNode->next = NULL;

	if (list->numOfdata == NULL)
	{
		newNode->before = list->head;
		list->head->next = newNode;
	}
	else {
		newNode->before = list->tail;
		list->tail->next = newNode;
	}
	list->tail = newNode;
	list->numOfdata++;
}

void LFinsert(List *list, int data) {
	Node *newNode = (Node*)malloc(sizeof(Node));
	newNode->data = data;
	newNode->next = NULL;

	newNode->before = list->head;
	list->head->next->before = newNode;
	if (list->numOfdata == NULL)
		list->tail = newNode;
	else
		newNode->next = list->head->next;
	list->head->next = newNode;
	list->numOfdata++;
}

bool Lfirst(List *list, int *data) {
	if (list->head->next == NULL)
		return 0;
	list->cur = list->head->next;
	*data = list->cur->data;
	return 1;
}

bool Lnext(List *list, int *data) {
	if (list->cur->next == NULL)
		return 0;
	list->cur = list->cur->next;
	*data = list->cur->data;
	return 1;
}

int Lremove(List *list) {
	Node *tmp=list->cur;
	int dData=list->cur->data;

	list->cur->before->next = list->cur->next;
	list->cur->next->before = list->cur->before;
	list->cur = list->cur->before;
	free(tmp);
	list->numOfdata--;
	return dData;
}

int main()
{
	List list;
	int data;

	//초기화
	Linit(&list);
	//삽입
	Linsert(&list, 3);
	Linsert(&list, 4);
	Linsert(&list, 5);
	LFinsert(&list, 2);
	LFinsert(&list, 1);
	//출력
	if (Lfirst(&list, &data)) {
		printf("%d\n", data);
		while (Lnext(&list, &data)) 
			printf("%d\n", data);
		printf("\n\n");
	}
	//삭제
	if (Lfirst(&list, &data)) {
		if (data % 2 == 0)
			Lremove(&list);
		while (Lnext(&list, &data))
		{
			if (data % 2 == 0)
				Lremove(&list);
		}
	}
	//출력
	printf("2의 배수를 삭제한 후의 노드\n");
	if (Lfirst(&list, &data)) {
		printf("%d\n", data);
		while (Lnext(&list, &data))
			printf("%d\n", data);
		printf("\n\n");
	}
	//할당해제
	printf("더미노드 할당해제\n");
	if (list.numOfdata != 0)
	{
		Node *dNode = list.head;
		Node *dnNode = list.head->next;
		free(dNode);
		while (dnNode != NULL) {
			dNode = dnNode;
			dnNode = dnNode->next;
			printf("%d할당해제\n", dNode->data);
			free(dNode);
		}
	}
	else
		free(list.head);//더미노드 해제

	return 0;
}